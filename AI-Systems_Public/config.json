{
  "settings": {
    "context_compaction": true,
    "command_whitelist": ["context", "pr", "test", "workflow", "notebook", "mode", "gemini", "memory"],
    "response_length": "adaptive",
    "autocomplete": true,
    "gemini_optional": true,
    "gemini_prompts": {
      "enabled": true,
      "default_response": "n",
      "show_benefits": true
    },
    "sequential_thinking": {
      "enabled": true,
      "mandatory": true,
      "auto_trigger": {
        "complexity_threshold": "medium",
        "time_estimate": ">= 10min",
        "file_count": ">= 5",
        "error_debugging": true,
        "architecture_decisions": true,
        "performance_optimization": true,
        "security_implementation": true
      },
      "exceptions": {
        "gemini_active": true,
        "simple_tasks": ["read", "write", "edit", "ls", "grep", "cat"],
        "known_context": true,
        "direct_commands": true,
        "quick_retrieval": true
      },
      "visual_indicators": {
        "active": "[🧠 Sequential Thinking: Active]",
        "stage": "[🧠 Stage: {stage}]",
        "complete": "[🧠 Thinking Complete]"
      },
      "stages": ["Problem Definition", "Research", "Analysis", "Synthesis", "Conclusion"]
    }
  },
  
  "aliases": {
    "commands": {
      "/w": "/workflow",
      "/t": "/test",
      "/c": "/context",
      "/n": "/notebook",
      "/m": "/mode",
      "/p": "/pr",
      "/g": "/gemini"
    },
    "quick_access": {
      "/test-quick": "/test quick",
      "/test-full": "/test full",
      "/test-security": "/test security",
      "/test-performance": "/test performance",
      "/workflow-auto": "/workflow auto",
      "/workflow-plan": "/workflow plan",
      "/workflow-implement": "/workflow implement",
      "/workflow-refactor": "/workflow refactor",
      "/context-refresh": "/context refresh",
      "/context-status": "/context status",
      "/context-checkpoint": "/context checkpoint",
      "/context-export": "/context export",
      "/mode-strict": "/mode strict",
      "/mode-auto": "/mode auto",
      "/mode-hybrid": "/mode hybrid",
      "/gemini-review": "/gemini review",
      "/gemini-optimize": "/gemini optimize",
      "/gemini-security": "/gemini security",
      "/gemini-patterns": "/gemini patterns",
      "/notebook-extract": "/notebook extract",
      "/notebook-summary": "/notebook summary"
    }
  },
  
  "modes": {
    "strict": {
      "icon": "🔒",
      "safe_guards": "maximum",
      "checkpoint_frequency": "every_action",
      "max_staleness": 50
    },
    "auto": {
      "icon": "🚀",
      "safe_guards": "standard",
      "checkpoint_frequency": "smart_triggers",
      "max_staleness": 120
    },
    "hybrid": {
      "icon": "⚖️",
      "safe_guards": "balanced",
      "checkpoint_frequency": "milestones",
      "max_staleness": 80
    }
  },
  
  "mode_detection": {
    "strict": {
      "patterns": ["production", "deploy", "release", "critical", "security"],
      "branches": ["main", "master", "production"]
    },
    "hybrid": {
      "patterns": ["refactor", "optimize", "complex"],
      "file_count": 10
    },
    "auto": {
      "default": true
    }
  },
  
  "drift_prevention": {
    "enabled": true,
    "thresholds": {
      "response_relevance": 0.7,
      "context_alignment": 0.75
    },
    "actions": {
      "mild_drift": "silent_partial_refresh",
      "severe_drift": "force_refresh_prompt"
    }
  },
  
  "validation": {
    "slater_constraints": {
      "no_domcontentloaded": {
        "patterns": ["DOMContentLoaded", "document\\.addEventListener\\(['\"]DOMContentLoaded"],
        "severity": "error",
        "message": "Slater autoloads - no DOMContentLoaded needed. Use direct initialization or Webflow.push() for dependencies.",
        "auto_fix": true
      },
      "no_vite_references": {
        "patterns": ["vite", "Vite", "import\\.meta\\.hot"],
        "severity": "warning",
        "message": "Vite is for future use only. Current development uses Slater."
      }
    },
    "webflow_constraints": {
      "no_dom_manipulation": {
        "patterns": ["createElement", "appendChild", "innerHTML ="],
        "severity": "error"
      },
      "rem_units_only": {
        "patterns": ["\\d+px(?![\\w-])"],
        "exceptions": ["border", "outline", "box-shadow"],
        "severity": "error",
        "auto_fix": true
      },
      "data_attributes_required": {
        "forbidden_selectors": ["^\\.w-", "^#w-"],
        "severity": "warning"
      },
      "no_console_production": {
        "patterns": ["console\\.log", "console\\.error", "console\\.warn"],
        "severity": "error",
        "auto_fix": true
      }
    },
    "auto_fixes": {
      "px_to_rem": {
        "enabled": true,
        "base_size": 16
      },
      "console_to_debug": {
        "enabled": true,
        "wrapper": "if (DEBUG)"
      },
      "domcontentloaded_to_direct": {
        "enabled": true,
        "description": "Convert DOMContentLoaded to direct initialization for Slater"
      }
    },
    "levels": {
      "strict": {
        "pre_execution": true,
        "post_execution": true,
        "abort_on_warning": true
      },
      "standard": {
        "pre_execution": true,
        "auto_fix": true
      },
      "minimal": {
        "critical_only": true
      }
    }
  },
  
  "notebook_extraction": {
    "patterns": {
      "client_preferences": {
        "patterns": [
          "client (wants?|prefers?|likes?|dislikes?|needs?|requires?) (.+)",
          "preference:? (.+)",
          "requirement:? (.+)"
        ],
        "key_prefix": "client",
        "priority": "high"
      },
      "technical_constraints": {
        "patterns": [
          "must (use|implement|include|have) (.+)",
          "cannot (use|implement|include|have) (.+)",
          "constraint:? (.+)"
        ],
        "key_prefix": "constraint",
        "priority": "high"
      },
      "performance_targets": {
        "patterns": [
          "(\\d+)\\s?(KB|MB|kb|mb)(?:\\s+(?:max|limit|budget))?",
          "(\\d+)\\s?(ms|s)(?:\\s+(?:max|limit|target))?",
          "(\\d+)\\s?fps"
        ],
        "key_prefix": "performance",
        "priority": "medium"
      },
      "api_endpoints": {
        "patterns": [
          "https?://[\\w.-]+/api/[\\w.-/]+",
          "endpoint:? (.+)",
          "api:? (.+)"
        ],
        "key_prefix": "api",
        "priority": "high",
        "sensitive": true
      },
      "deadlines": {
        "patterns": [
          "by (\\d{4}-\\d{2}-\\d{2})",
          "deadline:? (.+)",
          "due:? (.+)"
        ],
        "key_prefix": "deadline",
        "priority": "high"
      }
    },
    "auto_extraction": {
      "enabled": true,
      "confidence_threshold": 0.8,
      "max_entries_per_category": 10,
      "deduplication": true
    },
    "storage": {
      "location": ".claude/memory-bank/facts.json",
      "format": "json",
      "persistence": "permanent",
      "auto_save": true
    }
  },
  
  "fallback_behaviors": {
    "code_analysis": {
      "method": "grep_and_read",
      "patterns": ["function", "class", "export", "import"],
      "context_lines": 5
    },
    "optimization": {
      "method": "rule_based",
      "checks": ["bundle_size", "unused_imports", "console_logs", "pixel_units"]
    },
    "security": {
      "method": "pattern_matching",
      "patterns": ["api_key", "secret", "password", "token", "eval", "innerHTML"]
    },
    "context_export": {
      "method": "template_based",
      "include": ["current_branch", "recent_files", "active_tasks", "context_score"]
    }
  },
  
  "gemini_enhancement_triggers": {
    "workflow": {
      "conditions": ["files_count > 20", "complexity > medium", "user_request"],
      "prompt": "Gemini AI can reduce token usage by ~70% for this codebase analysis."
    },
    "test": {
      "conditions": ["test_type === 'full'", "files_count > 10"],
      "prompt": "Gemini can provide pattern detection and optimization insights."
    },
    "context": {
      "conditions": ["operation === 'export'", "context_score > 80"],
      "prompt": "Gemini can create a condensed context summary (80% smaller)."
    },
    "notebook": {
      "conditions": ["operation === 'extract'", "patterns_found > 5"],
      "prompt": "Enhance extraction with Gemini pattern recognition?"
    }
  },
  
  "current_mode": "auto"
}